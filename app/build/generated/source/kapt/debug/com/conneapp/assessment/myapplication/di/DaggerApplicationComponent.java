// Generated by Dagger (https://dagger.dev).
package com.conneapp.assessment.myapplication.di;

import androidx.fragment.app.Fragment;
import com.conneapp.assessment.myapplication.MainActivity;
import com.conneapp.assessment.myapplication.MainActivity_MembersInjector;
import com.conneapp.assessment.myapplication.repository.WeatherForecastRepository;
import com.conneapp.assessment.myapplication.retrofit.WeatherForecastAPI;
import com.conneapp.assessment.myapplication.viewmodels.MainViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private final DaggerApplicationComponent applicationComponent = this;

  private Provider<Retrofit> providesRetrofitProvider;

  private Provider<WeatherForecastAPI> providesWeatherForecastAPIProvider;

  private DaggerApplicationComponent(NetworkModule networkModuleParam) {

    initialize(networkModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  public static ApplicationComponent create() {
    return new Builder().build();
  }

  private WeatherForecastRepository weatherForecastRepository() {
    return new WeatherForecastRepository(providesWeatherForecastAPIProvider.get());
  }

  private MainViewModelFactory mainViewModelFactory() {
    return new MainViewModelFactory(weatherForecastRepository());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final NetworkModule networkModuleParam) {
    this.providesRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvidesRetrofitFactory.create(networkModuleParam));
    this.providesWeatherForecastAPIProvider = DoubleCheck.provider(NetworkModule_ProvidesWeatherForecastAPIFactory.create(networkModuleParam, providesRetrofitProvider));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  @Override
  public void injectFrag(Fragment fragment) {
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectWeatherForecastRepository(instance, weatherForecastRepository());
    MainActivity_MembersInjector.injectMainViewModelFactory(instance, mainViewModelFactory());
    return instance;
  }

  public static final class Builder {
    private NetworkModule networkModule;

    private Builder() {
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public ApplicationComponent build() {
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      return new DaggerApplicationComponent(networkModule);
    }
  }
}
