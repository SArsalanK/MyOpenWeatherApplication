// Generated by Dagger (https://dagger.dev).
package com.conneapp.assessment.myapplication.viewmodels;

import com.conneapp.assessment.myapplication.repository.WeatherForecastRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModelFactory_Factory implements Factory<MainViewModelFactory> {
  private final Provider<WeatherForecastRepository> weatherForecastRepositoryProvider;

  public MainViewModelFactory_Factory(
      Provider<WeatherForecastRepository> weatherForecastRepositoryProvider) {
    this.weatherForecastRepositoryProvider = weatherForecastRepositoryProvider;
  }

  @Override
  public MainViewModelFactory get() {
    return newInstance(weatherForecastRepositoryProvider.get());
  }

  public static MainViewModelFactory_Factory create(
      Provider<WeatherForecastRepository> weatherForecastRepositoryProvider) {
    return new MainViewModelFactory_Factory(weatherForecastRepositoryProvider);
  }

  public static MainViewModelFactory newInstance(
      WeatherForecastRepository weatherForecastRepository) {
    return new MainViewModelFactory(weatherForecastRepository);
  }
}
