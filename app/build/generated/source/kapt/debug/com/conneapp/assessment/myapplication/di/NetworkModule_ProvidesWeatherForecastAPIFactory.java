// Generated by Dagger (https://dagger.dev).
package com.conneapp.assessment.myapplication.di;

import com.conneapp.assessment.myapplication.retrofit.WeatherForecastAPI;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesWeatherForecastAPIFactory implements Factory<WeatherForecastAPI> {
  private final NetworkModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetworkModule_ProvidesWeatherForecastAPIFactory(NetworkModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public WeatherForecastAPI get() {
    return providesWeatherForecastAPI(module, retrofitProvider.get());
  }

  public static NetworkModule_ProvidesWeatherForecastAPIFactory create(NetworkModule module,
      Provider<Retrofit> retrofitProvider) {
    return new NetworkModule_ProvidesWeatherForecastAPIFactory(module, retrofitProvider);
  }

  public static WeatherForecastAPI providesWeatherForecastAPI(NetworkModule instance,
      Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.providesWeatherForecastAPI(retrofit));
  }
}
